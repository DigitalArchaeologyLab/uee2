# Generated by Django 3.2.5 on 2021-07-30 20:40

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Dynasty',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name_eng', models.CharField(max_length=200, verbose_name='Name (English)')),
                ('altnames_eng', models.CharField(max_length=500, verbose_name='Alternative names (English)')),
                ('name_ar', models.CharField(max_length=200, verbose_name='Name (Arabic)')),
                ('altnames_ar', models.CharField(max_length=500, verbose_name='Alternative names (Arabic)')),
                ('start', models.IntegerField(null=True)),
                ('end', models.IntegerField(null=True)),
            ],
            options={
                'verbose_name_plural': 'Dynasties',
            },
        ),
        migrations.CreateModel(
            name='Phase',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name_eng', models.CharField(max_length=200, verbose_name='Name (English)')),
                ('altnames_eng', models.CharField(max_length=500, verbose_name='Alternative names (English)')),
                ('name_ar', models.CharField(max_length=200, verbose_name='Name (Arabic)')),
                ('altnames_ar', models.CharField(max_length=500, verbose_name='Alternative names (Arabic)')),
                ('start', models.IntegerField(null=True)),
                ('end', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Reign',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name_eng', models.CharField(max_length=200, verbose_name='Name (English)')),
                ('altnames_eng', models.CharField(max_length=500, verbose_name='Alternative names (English)')),
                ('name_ar', models.CharField(max_length=200, verbose_name='Name (Arabic)')),
                ('altnames_ar', models.CharField(max_length=500, verbose_name='Alternative names (Arabic)')),
                ('start', models.IntegerField(null=True)),
                ('end', models.IntegerField(null=True)),
                ('dynasty', models.ManyToManyField(to='timemap.Dynasty')),
            ],
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name_eng', models.CharField(max_length=200, verbose_name='Name (English)')),
                ('altnames_eng', models.CharField(max_length=500, verbose_name='Alternative names (English)')),
                ('name_ar', models.CharField(max_length=200, verbose_name='Name (Arabic)')),
                ('altnames_ar', models.CharField(max_length=500, verbose_name='Alternative names (Arabic)')),
                ('isRegion', models.BooleanField()),
                ('isGovernate', models.BooleanField()),
                ('isNome', models.BooleanField()),
                ('isSite', models.BooleanField()),
                ('notes', models.TextField()),
                ('geojson', models.TextField()),
                ('lat', models.CharField(max_length=50)),
                ('lon', models.CharField(max_length=50)),
                ('children', models.ManyToManyField(related_name='place_children', to='timemap.Place')),
                ('parents', models.ManyToManyField(related_name='place_parents', to='timemap.Place')),
            ],
        ),
        migrations.CreateModel(
            name='Feature',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name_eng', models.CharField(max_length=200, verbose_name='Name (English)')),
                ('altnames_eng', models.CharField(max_length=500, verbose_name='Alternative names (English)')),
                ('name_ar', models.CharField(max_length=200, verbose_name='Name (Arabic)')),
                ('altnames_ar', models.CharField(max_length=500, verbose_name='Alternative names (Arabic)')),
                ('geojson', models.TextField()),
                ('lat', models.CharField(max_length=50)),
                ('lon', models.CharField(max_length=50)),
                ('notes', models.TextField()),
                ('site', models.ManyToManyField(to='timemap.Place')),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('Construction', 'Construction'), ('Destruction', 'Destruction'), ('Inactive / defunct', 'Inactive / defunct'), ('Modification', 'Modification'), ('In use', 'In use')], default='In use', max_length=200)),
                ('startDate', models.IntegerField(null=True)),
                ('endDate', models.IntegerField(null=True)),
                ('notes', models.TextField()),
                ('associatedFeature', models.ManyToManyField(to='timemap.Feature')),
                ('associatedPlace', models.ManyToManyField(to='timemap.Place')),
                ('endDynasty', models.ManyToManyField(related_name='endDynasty', to='timemap.Dynasty')),
                ('endPhase', models.ManyToManyField(related_name='endPhase', to='timemap.Phase')),
                ('endReign', models.ManyToManyField(related_name='endReign', to='timemap.Reign')),
                ('startDynasty', models.ManyToManyField(related_name='startDynasty', to='timemap.Dynasty')),
                ('startPhase', models.ManyToManyField(related_name='startPhase', to='timemap.Phase')),
                ('startReign', models.ManyToManyField(related_name='startReign', to='timemap.Reign')),
            ],
        ),
        migrations.AddField(
            model_name='dynasty',
            name='phase',
            field=models.ManyToManyField(to='timemap.Phase'),
        ),
    ]
